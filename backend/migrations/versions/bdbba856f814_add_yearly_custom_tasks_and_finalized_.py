"""Add yearly custom tasks and finalized years

Revision ID: bdbba856f814
Revises: 
Create Date: 2025-08-23 07:01:19.133253

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy import String, Integer, JSON
import json
from datetime import datetime
from sqlalchemy.orm import sessionmaker


# revision identifiers, used by Alembic.
revision = 'bdbba856f814'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # Check if tables already exist (for existing databases)
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    
    if not inspector.has_table('staffs'):
        # ### commands auto generated by Alembic - please adjust! ###
        op.create_table('staffs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
        )
    
    if not inspector.has_table('clients'):
        op.create_table('clients',
        sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('fiscal_month', sa.Integer(), nullable=False),
        sa.Column('staff_id', sa.Integer(), nullable=False),
        sa.Column('accounting_method', sa.String(length=255), nullable=True),
        sa.Column('status', sa.String(length=255), nullable=True),
        sa.Column('custom_tasks_by_year', sa.JSON(), nullable=True),
        sa.Column('finalized_years', sa.JSON(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['staff_id'], ['staffs.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    else:
        # Handle existing clients table - add new columns and migrate data
        if inspector.has_table('clients'):
            existing_columns = [col['name'] for col in inspector.get_columns('clients')]
            
            # Add new columns if they don't exist
            if 'custom_tasks_by_year' not in existing_columns:
                op.add_column('clients', sa.Column('custom_tasks_by_year', sa.JSON(), nullable=True))
            if 'finalized_years' not in existing_columns:
                op.add_column('clients', sa.Column('finalized_years', sa.JSON(), nullable=True))
            
            # Migrate existing custom_tasks data
            if 'custom_tasks' in existing_columns:
                # Data migration logic
                connection = op.get_bind()
                current_year = str(datetime.now().year)
                
                # Get all clients with custom_tasks
                result = connection.execute(sa.text("SELECT id, custom_tasks FROM clients WHERE custom_tasks IS NOT NULL"))
                for row in result:
                    client_id = row[0]
                    old_custom_tasks = row[1]
                    
                    if old_custom_tasks:
                        # Convert old list to new year-indexed dictionary
                        new_custom_tasks_by_year = {current_year: old_custom_tasks}
                        
                        # Update the record
                        connection.execute(
                            sa.text("UPDATE clients SET custom_tasks_by_year = :new_tasks_by_year, finalized_years = :finalized_years WHERE id = :client_id"),
                            {
                                "new_tasks_by_year": json.dumps(new_custom_tasks_by_year),
                                "finalized_years": json.dumps([]),
                                "client_id": client_id
                            }
                        )
                
                # Initialize empty values for clients without custom_tasks
                connection.execute(
                    sa.text("UPDATE clients SET custom_tasks_by_year = :empty_dict, finalized_years = :empty_list WHERE custom_tasks_by_year IS NULL"),
                    {"empty_dict": json.dumps({}), "empty_list": json.dumps([])}
                )
                
                # Drop the old custom_tasks column
                op.drop_column('clients', 'custom_tasks')
    
    if not inspector.has_table('monthly_tasks'):
        op.create_table('monthly_tasks',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('client_id', sa.Integer(), nullable=False),
        sa.Column('month', sa.String(length=255), nullable=False),
        sa.Column('tasks', sa.JSON(), nullable=True),
        sa.Column('status', sa.String(length=255), nullable=True),
        sa.Column('url', sa.String(length=255), nullable=True),
        sa.Column('memo', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    
    if inspector.has_table('clients'):
        # Add back custom_tasks column before dropping new columns
        existing_columns = [col['name'] for col in inspector.get_columns('clients')]
        if 'custom_tasks' not in existing_columns:
            op.add_column('clients', sa.Column('custom_tasks', sa.JSON(), nullable=True))
        
        # Migrate data back (optional - basic implementation)
        if 'custom_tasks_by_year' in existing_columns:
            connection = op.get_bind()
            current_year = str(datetime.now().year)
            
            # Get clients with custom_tasks_by_year data
            result = connection.execute(sa.text("SELECT id, custom_tasks_by_year FROM clients WHERE custom_tasks_by_year IS NOT NULL"))
            for row in result:
                client_id = row[0]
                tasks_by_year = row[1]
                
                if tasks_by_year and current_year in tasks_by_year:
                    # Use current year's tasks as the restored custom_tasks
                    connection.execute(
                        sa.text("UPDATE clients SET custom_tasks = :custom_tasks WHERE id = :client_id"),
                        {"custom_tasks": json.dumps(tasks_by_year[current_year]), "client_id": client_id}
                    )
        
        # Drop the new columns
        if 'custom_tasks_by_year' in existing_columns:
            op.drop_column('clients', 'custom_tasks_by_year')
        if 'finalized_years' in existing_columns:
            op.drop_column('clients', 'finalized_years')
    
    op.drop_table('monthly_tasks')
    op.drop_table('clients')
    op.drop_table('staffs')
    # ### end Alembic commands ###
